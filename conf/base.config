/*
 * -------------------------------------------------
 *  nf-core/imcyto Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'ignore' } // ignore errors so that successful sampels go through even when bad ones don't
  maxRetries = 3
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel:'process_low' {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 0.5.h * task.attempt, 'time' ) }
  }
  withLabel:'process_medium' {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:'process_high' {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }


  withLabel:'deep_imcyto_GPU' {
    container = 'magnesa/phlex:deepimcyto_3'
    containerOptions = "-B ${params.singularity_bind_path} --nv"
    // executor = "slurm"
    time = "1h"
    clusterOptions = "--part=gpu --gres=gpu:1"
    // cleanup = true
  }


  withLabel:'deep_imcyto_local' {
    container = 'magnesa/phlex:deepimcyto_3'
    containerOptions = "-B ${params.singularity_bind_path} --nv"
    executor = "local"
    cleanup = true
  }

  withLabel:'MCCS' {
    container = 'cellprofiler/cellprofiler:3.1.9'
    withName:'PREPROCESS_MCCS_STACK|PREPROCESS_FULL_STACK' {
      //process low
      cpus = { check_max( 2 * task.attempt, 'cpus' ) }
      memory = { check_max( 14.GB * task.attempt, 'memory' ) }
      time = { check_max( 0.5.h * task.attempt, 'time' ) }
    }
    withName:'CONSENSUS_CELL_SEGMENTATION_MCCS_PP|CONSENSUS_CELL_SEGMENTATION|CELL_SEGMENTATION' {
      //process medium
      cpus = { check_max( 6 * task.attempt, 'cpus' ) }
      memory = { check_max( 42.GB * task.attempt, 'memory' ) }
      time = { check_max( 8.h * task.attempt, 'time' ) }
    }

  }

  withLabel: 'short' {
      executor = 'local'
  }

  withName:IMCTOOLS {
    container = 'quay.io/biocontainers-imctools-1.0.5--py_0'
  }

  withName:PREPROCESS_FULL_STACK {
    container = 'cellprofiler/cellprofiler:3.1.9'
  }
  withName:PREPROCESS_MCCS_STACK {
    container = 'cellprofiler/cellprofiler:3.1.9'
  }
  withName:ILASTIK {
    container = 'ilastik/ilastik-from-binary:1.3.3b1'
  }
  withName:CELL_SEGMENTATION {
    container = 'cellprofiler/cellprofiler:3.1.9'
  }
  withName:CONSENSUS_CELL_SEGMENTATION {
    container = 'cellprofiler/cellprofiler:3.1.9'
  }
  withName:CONSENSUS_CELL_SEGMENTATION_MCCS_PP {
    container = 'cellprofiler/cellprofiler:3.1.9'
  }
  withName:output_documentation {
    container = 'quay.io/biocontainers/r-rmarkdown:0.9.5--r3.3.2_0'
  }
  withName:get_software_versions {
    container = 'cellprofiler/cellprofiler:3.1.9'
  }

}

singularity {
  singularity.enabled = true
  singularity.autoMounts = true
}
